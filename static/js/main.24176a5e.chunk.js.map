{"version":3,"sources":["component/currencyconvert.js","App.js","serviceWorker.js","index.js"],"names":["currencyconvert","props","selectedCurrency","currencyOptions","amount","onChangeCurrency","onChangeAmount","className","type","value","onChange","map","option","key","BASE_URL","App","toAmount","fromAmount","useState","ToCurrency","setToCurrency","FromCurrency","setFromCurrency","setCurrencyOption","setAmount","exchangeRate","setExchangeRate","amoutInFromCurrency","setAmoutInFromCurrency","useEffect","fetch","then","res","json","data","base","Object","keys","rates","e","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wNAEe,SAASA,EAAgBC,GAAQ,IACrCC,EAA2ED,EAA3EC,iBAAiBC,EAA0DF,EAA1DE,gBAAgBC,EAA0CH,EAA1CG,OAAOC,EAAmCJ,EAAnCI,iBAAiBC,EAAkBL,EAAlBK,eAChE,OACI,6BACI,2BAAOC,UAAU,QAAQC,KAAK,SAASC,MAAOL,EAAQM,SAAUJ,IAChE,4BAAQG,MAAOP,EAAkBQ,SAAUL,GAClDF,EAAgBQ,KAAI,SAAAC,GAAM,OAAI,4BAAQC,IAAKD,EAAQH,MAAOG,GAASA,QCJxE,IAAME,EAAW,0CAEF,SAASC,IAAO,IASzBC,EAAUC,EATc,EAEOC,qBAFP,mBAErBC,EAFqB,KAEVC,EAFU,OAGWF,qBAHX,mBAGrBG,EAHqB,KAGRC,EAHQ,OAIgBJ,mBAAS,IAJzB,mBAIrBf,EAJqB,KAILoB,EAJK,OAKDL,qBALC,mBAKrBd,EALqB,KAKdoB,EALc,OAMWN,qBANX,mBAMrBO,EANqB,KAMRC,EANQ,OAOyBR,oBAAS,GAPlC,mBAOrBS,EAPqB,KAODC,EAPC,KAiD5B,OAtCGD,GACDV,EAAab,EACbY,EAAWZ,EAASqB,IAGpBT,EAAWZ,EACXa,EAAab,EAASqB,GAGxBI,qBAAU,WACRC,MAAMhB,GACLiB,MAAK,SAAAC,GAAG,OAAGA,EAAIC,UACfF,MAAK,SAAAG,GACJX,EAAkB,CAACW,EAAKC,MAAP,mBAAeC,OAAOC,KAAKH,EAAKI,UACjDlB,EAAc,YAAIgB,OAAOC,KAAKH,EAAKI,QAAQ,IAC3ChB,EAAgBY,EAAKC,MACrBT,EAAgBQ,EAAKI,MAAMF,OAAOC,KAAKH,EAAKI,OAAO,UAErD,IAYFT,qBAAU,WACO,MAAZV,GAAmC,MAAfE,GACrBS,MAAM,GAAD,OAAIhB,EAAJ,iBAAqBO,EAArB,oBAA6CF,IACjDY,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GAAI,OAAIR,EAAgBQ,EAAKI,MAAMnB,SAE3C,CAACA,EAAWE,IAGZ,yBAAKd,UAAU,OACb,uCACA,kBAAC,EAAD,CACEL,iBAAkBmB,EAClBlB,gBAAiBA,EACjBC,OAAUa,EACVZ,iBAAkB,SAAAkC,GAAC,OAAEjB,EAAgBiB,EAAEC,OAAO/B,QAC9CH,eA1BN,SAAgCiC,GAC9Bf,EAAUe,EAAEC,OAAO/B,OACnBmB,GAAuB,MA0BrB,yBAAKrB,UAAU,OAAf,KACA,kBAAC,EAAD,CACEL,iBAAkBiB,EAClBhB,gBAAiBA,EACjBC,OAAUY,EACVX,iBAAkB,SAAAkC,GAAC,OAAEnB,EAAcmB,EAAEC,OAAO/B,QAC5CH,eA7BN,SAA8BiC,GAC5Bf,EAAUe,EAAEC,OAAO/B,OACnBmB,GAAuB,OChCPa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.24176a5e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function currencyconvert(props) {\r\n    const {selectedCurrency,currencyOptions,amount,onChangeCurrency,onChangeAmount} = props;\r\n    return (\r\n        <div>\r\n            <input className=\"input\" type=\"number\" value={amount} onChange={onChangeAmount}/>\r\n            <select value={selectedCurrency} onChange={onChangeCurrency}>\r\n    {currencyOptions.map(option => <option key={option} value={option}>{option}</option>)}\r\n            </select>\r\n        </div>\r\n    )\r\n}","import React,{useEffect,useState} from 'react';\nimport './App.css';\nimport Currencyconvert from './component/currencyconvert';\n\nconst BASE_URL = \" https://api.exchangeratesapi.io/latest\"\n\nexport default function App() {\n\n  const [ToCurrency,setToCurrency] = useState();\n  const [FromCurrency,setFromCurrency] = useState();\n  const [currencyOptions,setCurrencyOption] = useState([]);\n  const [amount,setAmount] = useState();\n  const [exchangeRate,setExchangeRate] = useState();\n  const [amoutInFromCurrency,setAmoutInFromCurrency] = useState(true);\n\n  let toAmount, fromAmount;\n\n  if(amoutInFromCurrency){\n    fromAmount = amount;\n    toAmount = amount * exchangeRate;\n  }\n  else{\n    toAmount = amount;\n    fromAmount = amount / exchangeRate;\n  }\n\n  useEffect(()=>{\n    fetch(BASE_URL)\n    .then(res=> res.json())\n    .then(data=> {\n      setCurrencyOption([data.base,...Object.keys(data.rates)])\n      setToCurrency([...Object.keys(data.rates)][0])\n      setFromCurrency(data.base)\n      setExchangeRate(data.rates[Object.keys(data.rates)[0]])\n    })\n  },[])\n\n  function handleFromAmountChange(e){\n    setAmount(e.target.value);\n    setAmoutInFromCurrency(true);\n  }\n\n  function handleToAmountChange(e){\n    setAmount(e.target.value);\n    setAmoutInFromCurrency(false);\n  }\n\n  useEffect(()=>{\n    if(ToCurrency!=null && FromCurrency!= null){\n      fetch(`${BASE_URL}?base=${FromCurrency}&symbols=${ToCurrency}`)\n      .then(res=>res.json())\n      .then(data => setExchangeRate(data.rates[ToCurrency]))\n    }\n  },[ToCurrency,FromCurrency])\n\n  return (\n    <div className=\"App\">\n      <h1>Convert</h1>\n      <Currencyconvert \n        selectedCurrency={FromCurrency}\n        currencyOptions={currencyOptions}\n        amount = {fromAmount}\n        onChangeCurrency={e=>setFromCurrency(e.target.value)}\n        onChangeAmount={handleFromAmountChange}\n      />\n      <div className=\"App\">=</div>\n      <Currencyconvert \n        selectedCurrency={ToCurrency}\n        currencyOptions={currencyOptions}\n        amount = {toAmount}\n        onChangeCurrency={e=>setToCurrency(e.target.value)}\n        onChangeAmount={handleToAmountChange}\n      />\n    </div>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}